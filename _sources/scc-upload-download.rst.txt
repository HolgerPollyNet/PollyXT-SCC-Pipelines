*****************************************
Uploading to SCC and downloading products
*****************************************

The commands :code:`scc-upload` and :code:`scc-download` are used to upload files to SCC and download
the processing products afterwards.


Uploading
=========

The :code:`scc-upload` command is used to upload one or more files to SCC.

.. code-block:: sh

  pollyxt_pipelines scc-upload <path> [<list>]

* :code:`path` :badge-blue:`required`: Path to upload. If a direcctory, the program will upload all SCC files inside.
* :code:`--no-calibration`: If uploading a directory, do not upload calibration files.
* :code:`list`: Optionally, write the list of uploaded measurement IDs to a CSV file to later download the products.

.. attention:: This command required :doc:`Authentication <auth>`!


For each file uploaded, the program will try to find the corresponding sounding netCDF file and
also upload it.

If you define the :code:`list`, the program will create a CSV file containing all uploaded file IDs.
You can later use this file to download the corresponding products using
:code:`scc-download`.



Download products
=================

After uploading files using :code:`scc-upload` and storing the list of IDs using the :code:`list`
argument, the products can be downloaded using :code:`scc-download`. This command reads the list,
checks for any files that have finished procesing, and downloads all results in a directory of choice.

.. code-block:: sh

   pollyxt_pipelines scc-download [--id <...>] <output-directory> [<list>]

* :code:`output-directory` :badge-blue:`required`: Where to store the downloaded files. This directory will be created if it doesn't exist.
* :code:`list`: Path to list file generated by `scc-upload`. Checks all files and downloads all available products
* :code:`--id`: Instead of a :code:`list`, you can provide one or mode measurement IDs to download products for.



Examples
========

Upload all files from the `./scc_data` directory to SCC and store the IDs inside `uploaded.csv`.
Afterwards, download all measurement products:

.. code-block:: sh

  # Store uploaded measurement IDs inside `uploaded.csv`
  pollyxt_pipelines scc-upload ./scc_data uploaded.csv

  # Wait for a bit for processing to finish...

  # Download available products for the uploaded files
  pollyxt_pipelines scc-download ./scc_products uploaded.csv
  # You can repeat the above command to download any products that were not available
  # during the first run




API
===

All network-related operationg are handled by the :code:`pollyxt_pipelines.scc_access` module, which
has a :code:`SCC` class. For more information read the :doc:`Network API <network-api>` page.